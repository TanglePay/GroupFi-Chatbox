https://explorer.shimmer.network/shimmer/block/0x149fd70b4e1fbe57a4e89bebde512d48b31d634aadbea795583ba5f70b4961f0

签名的原始字符串:
0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a226148496b55726e724a68534c374b445a655057415a707658554c6442495a4344222c22657068656d5075626c69634b6579223a226d4c566e6f2b4943326776417641342f766330516639656638362f65394c5a6377562f34576b56565a6d513d222c2263697068657274657874223a224f477236757734756c6c66465a74712b762b65707a302b4f4c4738714879324e754347445959593078726f6b7464304d763251326646497678527136505041397573353666304e2f4169446a4e6172775768416764486e4d546f312b65796b39536b712b633841635665633d227d0x928100571464c900A2F53689353770455D78a2000x9b3da30c3aa890958b95e96b65a5e0f77a28cb1211d097ab943ef03d9dab965111711449778

metadataObj:
{
    "encryptedPrivateKey": "0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a226148496b55726e724a68534c374b445a655057415a707658554c6442495a4344222c22657068656d5075626c69634b6579223a226d4c566e6f2b4943326776417641342f766330516639656638362f65394c5a6377562f34576b56565a6d513d222c2263697068657274657874223a224f477236757734756c6c66465a74712b762b65707a302b4f4c4738714879324e754347445959593078726f6b7464304d763251326646497678527136505041397573353666304e2f4169446a4e6172775768416764486e4d546f312b65796b39536b712b633841635665633d227d",
    "pairXPublicKey": "0x9b3da30c3aa890958b95e96b65a5e0f77a28cb1211d097ab943ef03d9dab9651",
    "evmAddress": "0x928100571464c900A2F53689353770455D78a200",
    "timestamp": 1711449778,
    "scenery": 1
}
字符串拼接方法:
const dataTobeSignedStr = [
    metadataObj.encryptedPrivateKey,
    metadataObj.evmAddress,
    metadataObj.pairXPublicKey,
    metadataObj.scenery,
    metadataObj.timestamp
].join('')

signature: 0xccec1e146ff48198566e706d548536c4cc3e6afa3ac351c740fb9f951912b90f1fb064f33682ac12f9e9fad446e3a9dc7ce53dd81c36729fa41cf946f4d1138c1b

签名方法:
import { hashPersonalMessage, ecsign, toRpcSig } from '@ethereumjs/util'
EthPersonalSign(dataToBeSignedHex: string) {
  const messageBytes = Converter.hexToBytes(dataToBeSignedHex)
  const messageHash = hashPersonalMessage(messageBytes)
  const signature = ecsign(messageHash, this._EVMAccount._wallet!.getPrivateKey())
  const serializedSignature = toRpcSig(signature.v, signature.r, signature.s)
  console.log('===> serializedSignature', serializedSignature)
  return serializedSignature
}
